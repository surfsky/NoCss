// create observer for dom changing.
const observer = new MutationObserver((mutationsList, observer) => {
    for (const mutation of mutationsList) {
        const ele = mutation.target;
        if (mutation.type == 'childList'){
            // when new element created, set it's custom attributes.
            if (mutation.addedNodes.length > 0){
                mutation.addedNodes.forEach((node)=>{
                    if (node instanceof HTMLUnknownElement)
                        if (node.tagName == 'RECT')
                        {
                            // 创建一个新的 Rect 实例
                            const rectInstance = new Rect();

                            // 复制原始节点的属性到新实例
                            Array.from(node.attributes).forEach((attr) => {
                                rectInstance.setAttribute(attr.name, attr.value);
                            });

                            // 复制原始节点的子节点到新实例
                            Array.from(node.childNodes).forEach((childNode) => {
                                rectInstance.appendChild(childNode);
                            });

                            // 迁移事件绑定
                            const eventListeners = getEventListeners(node);
                            for (let eventType in eventListeners) {
                                eventListeners[eventType].forEach((listener) => {
                                    rectInstance.addEventListener(eventType, listener);
                                });
                            }

                            // 将原始节点替换为新的 Rect 实例
                            ele.replaceChild(rectInstance, node);
                        } 
                });
            }
        }
    }
});
observer.observe(document, { attributes: true, childList: true, subtree: true });

// 辅助函数用于获取元素上绑定的所有事件监听器
function getEventListeners(element) {
    const listeners = {};
    const events = element.attributes;
    for (let i = 0; i < events.length; i++) {
        const attr = events[i];
        if (attr.name.startsWith('on')) {
            const eventType = attr.name.slice(2);
            const listener = attr.value;
            if (!listeners[eventType]) {
                listeners[eventType] = [];
            }
            listeners[eventType].push(new Function('event', listener));
        }
    }
    return listeners;
}





class RectX extends HTMLElement{
    constructor() {
        this.style.width = '100px';
        this.style.height = '100px';
        this.style.border = '1px solid red';
        super();
    }
}

// 定义一个自定义命名空间
const customNamespace = "http://your-custom-namespace.com";

// 使用自定义命名空间注册自定义元素
document.createElementNS(customNamespace, 'rect');
customElements.define('rectx', RectX, { extends: customNamespace });


        //if (ele.style.hasOwnProperty(name)){
        //    ele.style.setProperty(name, newValue);
        //    return;
        //}

        //var styleKeys = Object.keys(ele.style);


              <row height='100%' width='400px'>
                <img src='${Utils.getIconUrl(icon)}' width='20px' height='20px'/>&nbsp;
                <div>${text}<div>
              </row>

                      ele.linkTag = document.createElement('link');
        ele.linkTag.rel = 'stylesheet';
        ele.linkTag.href = Utils.iconFontRoot + "iconfont.css";
        document.head.appendChild(ele.linkTag);


        ele.id = this.getId(ele);
        if (ele.styleTag == null)
            ele.styleTag = document.createElement('style');
        ele.styleTag.textContent = `#${ele.id} > *  {margin: ${val} }`;
        this.saveStyle(ele);

    /** Set children margin 
     * @param {HTMLElement} ele 
     * @param {string} val css number. eg. 10px, 1em, 1rem
    */
    static setChildMargin(ele, val){
        this.setChildStyle(ele, 'margin', val);
    }



        // enject extension functions
        HTMLElement.prototype.animate = function(animFunc, endFunc=null, second=0.1, easing='ease'){
            var ele = this;
            ele.style.transition = `all ${second}s ${easing}`;
            if (endFunc != null)
                ele.addEventListener('transitionend', () => endFunc(ele), { once: true });
            requestAnimationFrame(() => animFunc(ele));
        };

    &lt;x-style&gl; tag apply style to body. The default css is:
    <pre>
    /* fullscreen */
    html,body {
        width: 100%;  height: 100%; 
        padding: 0px; margin: 0px;
    }

    /* boxmodule */
    *, *::before, *::after {box-sizing: border-box;}

    /* animation */
    * {transition: 0.5s;}

    /* link */
    a, a:hover, a:visited { text-decoration: none; }
    </pre>



                //var url = this.href;
                //var index = url.indexOf('&');
                //if (index != -1) 
                //    url = url.slice(0, index);

        //content = content.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');  // 删除script标签块



        <row id="switch2" width="100px" height="40px" radius="20px" 
            border="1px solid #a0a0a0" 
            bgcolor="green"
            >
            <circle width="38px"  order="2" bgcolor="white" border="2px solid green"></circle>
            <div    height="40px" order="1" flex="1" childAnchor="center" color="white">ON</div>
        </row>
